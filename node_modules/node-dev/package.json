{
  "_args": [
    [
      {
        "raw": "node-dev",
        "scope": null,
        "escapedName": "node-dev",
        "name": "node-dev",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Applications/MAMP/htdocs/fcc_timestamp"
    ]
  ],
  "_from": "node-dev@latest",
  "_id": "node-dev@3.1.3",
  "_inCache": true,
  "_location": "/node-dev",
  "_nodeVersion": "6.0.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/node-dev-3.1.3.tgz_1464597773220_0.4355018842034042"
  },
  "_npmUser": {
    "name": "fgnass",
    "email": "fgnass@gmail.com"
  },
  "_npmVersion": "3.8.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-dev",
    "scope": null,
    "escapedName": "node-dev",
    "name": "node-dev",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/node-dev/-/node-dev-3.1.3.tgz",
  "_shasum": "582719223ebdef5d63059e6a7fbcd2399fc0f84d",
  "_shrinkwrap": null,
  "_spec": "node-dev",
  "_where": "/Applications/MAMP/htdocs/fcc_timestamp",
  "author": {
    "name": "Felix Gnass"
  },
  "bin": {
    "node-dev": "./bin/node-dev"
  },
  "bugs": {
    "url": "https://github.com/fgnass/node-dev/issues"
  },
  "contributors": [
    {
      "name": "Daniel Gasienica",
      "email": "daniel@gasienica.ch",
      "url": "https://github.com/gasi/"
    }
  ],
  "dependencies": {
    "dateformat": "~1.0.4-1.2.3",
    "dynamic-dedupe": "^0.2.0",
    "filewatcher": "~3.0.0",
    "minimist": "^1.1.3",
    "node-notifier": "^4.0.2",
    "resolve": "^1.0.0"
  },
  "description": "Restarts your app when files are modified",
  "devDependencies": {
    "coffee-script": "^1.8.0",
    "eslint": "^2.0.0",
    "eslint-config-airbnb-base": "^3.0.1",
    "eslint-plugin-import": "^1.8.1",
    "tap": "^5.2.0",
    "touch": "^1.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "582719223ebdef5d63059e6a7fbcd2399fc0f84d",
    "tarball": "https://registry.npmjs.org/node-dev/-/node-dev-3.1.3.tgz"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "gitHead": "55d67b0406947bf8c5e1f206d7469d55378a8655",
  "homepage": "https://github.com/fgnass/node-dev#readme",
  "keywords": [
    "restart",
    "reload",
    "supervisor",
    "monitor",
    "watch"
  ],
  "license": "MIT",
  "main": "./lib",
  "maintainers": [
    {
      "name": "fgnass",
      "email": "fgnass@gmail.com"
    },
    {
      "name": "gasi",
      "email": "daniel@gasienica.ch"
    },
    {
      "name": "tomekwi",
      "email": "t.wiszniewski@gmail.com"
    }
  ],
  "name": "node-dev",
  "optionalDependencies": {},
  "preferGlobal": true,
  "readme": "[![Build Status](https://secure.travis-ci.org/fgnass/node-dev.png)](http://travis-ci.org/fgnass/node-dev)\n\n### node-dev (1)\n\nNode-dev is a development tool for [Node.js](http://nodejs.org) that\nautomatically restarts the node process when a file is modified.\n\nIn contrast to tools like\n[supervisor](https://github.com/isaacs/node-supervisor) or\n[nodemon](https://github.com/remy/nodemon) it doesn't scan the filesystem for\nfiles to be watched. Instead it hooks into Node's `require()` function to watch\nonly the files that have been _actually required_.\n\nThis means that you don't have to configure any include- or exclude rules.\nIf you modify a JS file that is solely used on the client-side but never run on\nthe server, __node-dev will know__ this and won't restart the process.\n\nThis also means that you __don't have to__ configure any file extensions. Just\nrequire a `.json` file or a `.coffee` script for example and it will be watched.\nAutomatically.\n\nNode-dev uses [filewatcher](https://www.npmjs.org/package/filewatcher) under\nthe hood and hence will take advantage of the native `fs.watch()` API if it\nis available on your system.\n\n\n# Usage\n\nJust run `node-dev` as you would normally run `node`:\n\n```\nnode-dev foo.js\n```\n\nThere are a couple of command line options that can be used to control which\nfiles are watched and what happens when they change:\n\n* `--no-deps` Watch only the project's own files and linked modules (via `npm link`)\n* `--all-deps` Watch the whole dependency tree\n* `--respawn` Keep watching for changes after the script has exited\n* `--dedupe` [Dedupe dynamically](https://www.npmjs.org/package/dynamic-dedupe)\n* `--poll` Force polling for file changes (Caution! CPU-heavy!)\n* `--no-notify` Switch off desktop notifications (see below)\n\nBy default node-dev will watch all first-level dependencies, i.e. the ones in\nthe project's `node_modules`folder.\n\n\n# Installation\n\nNode-dev can be installed via npm. Make sure to use the `-g` option to install\nit globally.\n\n    npm install -g node-dev\n\n### Desktop Notifications\n\nStatus and error messages can be displayed as desktop notification using\n[node-notifier](https://www.npmjs.org/package/node-notifier):\n\n![Screenshot](http://fgnass.github.com/images/node-dev.png)\n\n![Screenshot](http://fgnass.github.com/images/node-dev-linux.png)\n\n__Requirements:__\n\n* Mac OS X: >= 10.8 or Growl if earlier.\n* Linux: notify-osd installed (Ubuntu should have this by default)\n* Windows: >= 8, task bar balloon if earlier or Growl if that is installed.\n* General Fallback: Growl\n\n\n# Settings\n\nUsually node-dev doesn't require any configuration at all, but there are some\noptions you can set to tweak its behaviour:\n\n* `clear` – Whether to clear the screen upon restarts. _Default:_ `false`\n* `notify` – Whether to display desktop notifications. _Default:_ `true`\n* `timestamp` – The timestamp format to use for logging restarts. _Default:_ `\"HH:MM:ss\"`\n* `vm` – Whether to watch files loaded via Node's [VM](http://nodejs.org/docs/latest/api/vm.html) module. _Default:_ `true`\n* `fork` – Whether to hook into [child_process.fork](http://nodejs.org/docs/latest/api/child_process.html#child_process_child_process_fork_modulepath_args_options) (required for [clustered](http://nodejs.org/docs/latest/api/cluster.html) programs). _Default:_ `true`\n* `deps` – How many levels of dependencies should be watched. _Default:_ `1`\n* `dedupe` – Whether modules should by [dynamically deduped](https://www.npmjs.org/package/dynamic-dedupe). _Default:_ `false`\n\nUpon startup node-dev looks for a `.node-dev.json` file in the user's HOME\ndirectory. It will also look for a `.node-dev.json` file in the same directory\nas the script to be run, which (if present) overwrites the per-user settings.\n\n### Dedupe linked modules\n\nSometimes you need to make sure that multiple modules get\n_exactly the same instance_ of a common (peer-) dependency. This can usually be\nachieved by running `npm dedupe` – however this doesn't work when you try to\n`npm link` a dependency (which is quite common during development). Therefore\nnode-dev provides a `--dedupe` switch that will inject the\n[dynamic-dedupe](https://www.npmjs.org/package/dynamic-dedupe) module into your\napp.\n\n### Transpilers\n\nYou can also use node-dev to run transpiled languages. You can either use a\n.js file as entry point to your application that registers your transpiler as\nrequire-extension manually, for example by calling `CoffeeScript.register()` or\nyou can let node-dev do this for you.\n\nThere is a config option called `extensions` which maps file extensions to\ncompiler module names. By default this map looks like this:\n\n```json\n    {\n        \"coffee\": \"coffee-script/register\",\n        \"ls\": \"LiveScript\"\n    }\n```\n\nThis means that if you run `node-dev foo.coffee` node-dev will do a\n`require(\"coffee-script/register\")` before running your script.\n\n__Note:__ If you want to use coffee-script < 1.7 you have to change the\nsetting to `{\"coffee\": \"coffee-script\"}`.\n\nOptions can be passed to a transpiler by providing an object containing\n`name` and `options` attributes:\n\n```json\n    {\n        \"js\": {\n            \"name\": \"babel/register\",\n            \"options\": {\n                \"only\": [\n                    \"lib/**\",\n                    \"node_modules/es2015-only-module/**\"\n                ]\n            }\n        }\n    }\n```\n\n### Graceful restarts\n\nNode-dev sends a `SIGTERM` signal to the child-process if a restart is required.\nIf your app is not listening for these signals `process.exit(0)` will be called\nimmediately. If a listener is registered, node-dev assumes that your app will\nexit on its own once it is ready.\n\n### Ignore paths\n\nIf you’d like to ignore certain paths or files from triggering a restart simply\nlist them in the `.node-dev.json` configuration under `\"ignore\"`, e.g.\n\n```json\n{\n  \"ignore\": [\n    \"client/scripts\",\n    \"shared/module.js\"\n  ]\n}\n\n```\n\nThis might be useful when you are running a [universal][universal-javascript]\n(isomorphic) web app that shares modules across the server and client, e.g.\n[React.js](react) components for server-side rendering, which you don’t want to trigger a\nserver restart when changed, since it introduces an unnecessary delay.\n\n## License\n\nMIT\n\n\n[react]: http://facebook.github.io/react/\n[universal-javascript]: https://medium.com/@mjackson/universal-javascript-4761051b7ae9\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/fgnass/node-dev.git"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "version": "3.1.3"
}

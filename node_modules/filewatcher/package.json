{
  "_args": [
    [
      {
        "raw": "filewatcher@~3.0.0",
        "scope": null,
        "escapedName": "filewatcher",
        "name": "filewatcher",
        "rawSpec": "~3.0.0",
        "spec": ">=3.0.0 <3.1.0",
        "type": "range"
      },
      "/Applications/MAMP/htdocs/fcc_timestamp/node_modules/node-dev"
    ]
  ],
  "_from": "filewatcher@>=3.0.0 <3.1.0",
  "_id": "filewatcher@3.0.1",
  "_inCache": true,
  "_location": "/filewatcher",
  "_nodeVersion": "6.2.1",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/filewatcher-3.0.1.tgz_1468853679597_0.9448349452577531"
  },
  "_npmUser": {
    "name": "fgnass",
    "email": "fgnass@gmail.com"
  },
  "_npmVersion": "3.9.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "filewatcher@~3.0.0",
    "scope": null,
    "escapedName": "filewatcher",
    "name": "filewatcher",
    "rawSpec": "~3.0.0",
    "spec": ">=3.0.0 <3.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "/node-dev"
  ],
  "_resolved": "https://registry.npmjs.org/filewatcher/-/filewatcher-3.0.1.tgz",
  "_shasum": "f4a1957355ddaf443ccd78a895f3d55e23c8a034",
  "_shrinkwrap": null,
  "_spec": "filewatcher@~3.0.0",
  "_where": "/Applications/MAMP/htdocs/fcc_timestamp/node_modules/node-dev",
  "author": {
    "name": "Felix Gnass"
  },
  "bugs": {
    "url": "https://github.com/fgnass/filewatcher/issues"
  },
  "dependencies": {
    "debounce": "^1.0.0"
  },
  "description": "Wrapper around fs.watch with fallback to fs.watchFile",
  "devDependencies": {
    "rimraf": "~2.2.2",
    "tap": "^0.5.0"
  },
  "directories": {},
  "dist": {
    "shasum": "f4a1957355ddaf443ccd78a895f3d55e23c8a034",
    "tarball": "https://registry.npmjs.org/filewatcher/-/filewatcher-3.0.1.tgz"
  },
  "gitHead": "4a661569be98eb96966329ad23edefc7741ae17d",
  "homepage": "https://github.com/fgnass/filewatcher#readme",
  "keywords": [
    "fs",
    "file",
    "watch",
    "watchFile"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "fgnass",
      "email": "fgnass@gmail.com"
    }
  ],
  "name": "filewatcher",
  "optionalDependencies": {},
  "readme": "# filewatcher\n\n[![Build Status](https://travis-ci.org/fgnass/filewatcher.png?branch=master)](https://travis-ci.org/fgnass/filewatcher)\n\nSimple wrapper around `fs.watch` that works around the [various issues](https://github.com/joyent/node/search?q=fs.watch&type=Issues)\nyou have to deal with when using the Node API directly.\n\nMore precisely filewatcher â€¦\n* always reports file names (for all events on all OSes)\n* works well with editors that perform atomic writes (save & rename) like Sublime Text or vim\n* doesn't fire twice when files are saved\n* falls back to `fs.watchFile` when running out of file handles\n* has no native dependencies\n* uses Node's async APIs under the hood\n\nThis module is used by [node-dev](https://npmjs.org/package/node-dev)\nand [instant](https://npmjs.org/package/instant).\n\n### Usage\n\n```js\nvar filewatcher = require('filewatcher');\n\nvar watcher = filewatcher();\n\n// watch a file\nwatcher.add(__filename);\n\n// ... or a directory\nwatcher.add(__dirname);\n\nwatcher.on('change', function(file, stat) {\n  console.log('File modified: %s', file);\n  if (!stat) console.log('deleted');\n});\n```\n\nTo stop watching, you can remove either a single file or all watched files at once:\n```js\nwatcher.remove(file)\nwatcher.removeAll()\n```\n\n#### Notify users when falling back to polling\n\nWhen the process runs out of file handles, _filewatcher_ closes all watchers and transparently switches to `fs.watchFile` polling. You can notify your users by listening to the `fallback` event:\n\n```js\nwatcher.on('fallback', function(limit) {\n  console.log('Ran out of file handles after watching %s files.', limit);\n  console.log('Falling back to polling which uses more CPU.');\n  console.log('Run ulimit -n 10000 to increase the limit for open files.');\n});\n```\n\n### Options\n\nYou can pass options to `filewatcher()` in order to tweak its internal settings. These are the defaults:\n\n```js\n// the default options\nvar opts = {\n  forcePolling: false,  // try event-based watching first\n  debounce: 10,         // debounce events in non-polling mode by 10ms\n  interval: 1000,       // if we need to poll, do it every 1000ms\n  persistent: true      // don't end the process while files are watched\n};\n\nvar watcher = filewatcher(opts)\n```\n\n### The MIT License (MIT)\n\nCopyright (c) 2013-2016 Felix Gnass\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/fgnass/filewatcher.git"
  },
  "scripts": {
    "test": "ulimit -n 100 && ULIMIT=`ulimit -n` node test"
  },
  "version": "3.0.1"
}
